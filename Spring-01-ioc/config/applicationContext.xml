<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<bean id="helloWorld" class="org.com.cay.beans.HelloWorld">
		<property name="name" value="Cay"></property>
	</bean>
	
	<!-- 使用构造器注入属性值的时候可以指定参数的位置和参数的类型，以区分构造函数的重载 -->
	<bean id="car" class="org.com.cay.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="ShangHai" index="1"></constructor-arg>
		<constructor-arg value="30000" type="double"></constructor-arg>
	</bean>
	
	<bean id="car2" class="org.com.cay.beans.Car">
		<constructor-arg value="Audi" type="java.lang.String"></constructor-arg>
		<constructor-arg type="java.lang.String">
			<!-- 如果在value中有特殊字符，可以使用子节点value并用<![CDATA[...]]>包裹 -->
			<value><![CDATA[<Shanghai>]]></value>
		</constructor-arg>
		<constructor-arg value="240" type="int"></constructor-arg>
	</bean>
	
	<bean id="person" class="org.com.cay.beans.Person">
		<property name="name" value="Cay"></property>
		<!-- 引用外部bean -->
		<property name="car" ref="car2"></property>
		
		<!-- 内部bean -->
		<property name="address">
			<bean class="org.com.cay.beans.Address">
				<property name="country" value="China"></property>
				<property name="city" value="Shanghai"></property>
			</bean>
		</property>
	</bean>
	
	<bean id="car-1" class="org.com.cay.beans.collections.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="ShangHai" index="1"></constructor-arg>
		<constructor-arg value="30000" type="double"></constructor-arg>
	</bean>
	
	<bean id="car-2" class="org.com.cay.beans.collections.Car">
		<constructor-arg value="Audi" type="java.lang.String"></constructor-arg>
		<constructor-arg type="java.lang.String">
			<!-- 如果在value中有特殊字符，可以使用子节点value并用<![CDATA[...]]>包裹 -->
			<value><![CDATA[<Shanghai>]]></value>
		</constructor-arg>
		<constructor-arg value="240" type="int"></constructor-arg>
	</bean>
	
	
	<bean id="person2" class="org.com.cay.beans.collections.Person">
		<property name="name" value="Cay"></property>
		<property name="car">
			<!-- 使用list为集合属性赋值 -->
			<list>
				<ref bean="car-1"/>
				<ref bean="car-2"/>
			</list>
		</property>
	</bean>
	
	<bean id="newPerson" class="org.com.cay.beans.collections.NewPerson">
		<property name="name" value="Cay"></property>
		<property name="car">
			<!-- 使用map节点及map的entry子节点配置map类型的成员变量 -->
			<map>
				<entry key="first" value-ref="car-1"></entry>
				<entry key="second" value-ref="car-2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置单例的集合bean，以供多个bean进行引用，需要导入util命名空间 -->
	<util:list id="cars">
		<ref bean="car-1"/>
		<ref bean="car-2"/>
	</util:list>
	
	<bean id="person3" class="org.com.cay.beans.collections.Person">
		<property name="name" value="Cay"></property>
		<property name="car" ref="cars"></property>
	</bean>
	
	<!-- 使用p命名空间为bean的属性赋值，需要先导入p命名空间,相对于传统的配置方式更加简洁 -->
	<bean id="person4" class="org.com.cay.beans.collections.Person" p:name="Cay" p:car-ref="cars"></bean>
</beans>
